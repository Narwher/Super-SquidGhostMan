<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create &amp; ReadMe

//wew this one is tough to describe. basically i didn't make this feature. read on!

//bg = draw_sprite_tiled(spr_bg1,0,view_xview[0],view_yview[0]);

//draw_sprite_part(spr_bg1,0,)
                        ///wave script - put this in the draw event of an object
    //defining some variables...
    //you could probably move this junk to the create event
    //that way you don't have to do this every step, especially since this is a draw event


    //you can make this whatever you want, i just made this the room dimensions so it covers the window
    //this decides the width and height of the image, though it bulges a little up and to the sides
x = view_xview[0]
y = view_yview[0]
width = view_wview[0] + 8
height = view_hview[0]

    //how many pixels each "wave" is offset by at its peak
    //make this higher to make the waves more dramatic!
    //alternately, you could give the x and y coordinates of the vertexes below different offsets
offset=4

    //the amount of vertexes, e.g. the amount of points the big wobbly shape has
    //this code uses 48 vertexes total (plus 1) to make things extra smooth
    //but you could probably bump this down to 24 to make things run a little faster
    //or for low-poly look, i guess
    //however, you'd also have to change the wavewidth variable
    //keep in mind that the vertexes are placed like this -&gt; : : : :
    //since the actual width of the image is decided by the width variable,
    //you should be able to change vs freely without worrying about cropping the image
vs=48

    //how fast the waves move to the side
    //should have a very clear effect once you change this variable
wavespeed=2

    //wavewidth is a kinda misleading name
    //this is how many degrees the direction of a lengthdir_x changes per vertex
    //that sounds awfully clunky but basically,
    //360 degrees = one full wave
    //since i have 12 pairs of vertexes in this code,
    //having a wavewidth of 40 degrees gives me a little over one full wave
    //if you make this smaller then the wave will get bigger and less noticeable
    //if you make this bigger then you'll get loads of thin waves
    //i probably could have had a better solution than this, but i like lengthdir_x :P
wavewidth=40

    //just using some preexisting variables to initialize less variables
    //if you remove this then the wave speed will get really unpredictable
direction=image_angle
image_angle+=wavespeed

/*                        important!!                        */
    //this is what image the code is using!
        tex=background_get_texture(bg_floor_eve)
    //right now i'm just using a single background asset to make things easier, but...
    //you could totally use surface_get_texture() or something instead to capture a surface
    //this means you could apply this wave effect to pretty much anything!!!
    //even the screen itself, but you'd probably need to initialize a new surface or two
    //just plopping surface_get_texture(application_surf) into this wouldn't work because...
    //1: i guess gamemaker treats application_surf differently than other surfaces
    //2: you'd re-wobble the already wobbled screen every step, making everything totally warped


/*             this is where it starts for real!             */

    //primitive_begin_texture automatically blends itself with
    //whatever colour draw_set_colour() is set to, meaning that you need to set it to white first
    //kind of annoying, and easy to forget, but keep it in mind!
draw_set_color(c_white)

    //this function draws a shape defined by points from draw_vertex
    //and it also stretches and morphs the image defined by the tex variable
    //this can do super cool stuff once you start messing around with it, but
    //i don't think it's very good for performance though
draw_primitive_begin_texture(pr_trianglestrip,tex)

var i;
i=0

    //since the code below draws two vertexes for every loop, i just divide the vertex count by two
    //this makes it so that the vs variable up top is the actual amount of vertexes
    //(minus that one vertex above)
vs*=0.5

    //anyway, this is the actual stretchy code  V
    //first draw the top vertex of each pair, then draw the bottom vertex
    //the i variable increments by one each loop, and (i/vs) slowly goes from 0 to 1 as the i variable goes up
    //the -offset / +offset*2 variables are there to stretch the image a tiny bit to make sure the edges of the image don't slide into view, leaving blank space
    //every vertex is moved a little vertically and horizontally with two lengthdir_x variables, creating the wave effect
    //flip the signs of the lengthdirs or remove them from the ycoordinate part to mess around
    //it's really messy, i know :(

repeat(vs)
{
draw_vertex_texture(
x-offset+(width+offset*4)*i/vs+lengthdir_x(offset,direction),
y+0-offset+lengthdir_x(offset,direction),
max( 0, min( i/vs, 1 ) ),0)
//i+=0.5
//direction+=wavewidth //you can uncomment this line to make the waves offset more slanted, but you'd have to tweak the wavewidth variable too
draw_vertex_texture(
x-offset+(width+offset*4)*i/vs+lengthdir_x(offset,direction),
y+height+offset-lengthdir_x(offset,direction),
max( 0, min( i/vs, 1 ) ),1)

direction+=wavewidth
i+=1 //comment out the i+=1 and uncomment the two i+=0.5 lines to make the waves more slanted as well
}
draw_primitive_end()

    //sets the draw colour back so everything after this object doesn't suddenly turn white
draw_set_color(c_black)


    //sidenote: i guess you could use a slightly tinted bright colour instead of c_white like
    //merge_colour(c_aqua,c_white,0.5) or something
    //to give this a submerged look
    //but i dunno

//april 2016 - agemarkus
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
